<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lpfm.LastFmScrobbler</name>
    </assembly>
    <members>
        <member name="T:Lpfm.LastFmScrobbler.CorrectedTrack">
            <summary>
            Extends a Track DTO with field corrected meta-data
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Track">
            <summary>
            A DTO for Last.fm Track details
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.TrackNameParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.TrackName"/>
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.ArtistNameParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.ArtistName"/>
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.AlbumNameParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.AlbumName"/>
            </summary>        
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.AlbumArtistParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.AlbumArtist"/>
            </summary>        
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.TrackNumberParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.TrackNumber"/>
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.MusicBrainzIdParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.MusicBrainzId"/>
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.DurationParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.Duration"/>
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Track.WhenStartedPlayingParamName">
            <summary>
            API param name for <see cref="P:Lpfm.LastFmScrobbler.Track.WhenStartedPlaying"/>
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.TrackName">
            <summary>
            Required. The track name
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.ArtistName">
            <summary>
            Required. The artist name
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.AlbumName">
            <summary>
            Optional. The album name
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.AlbumArtist">
            <summary>
            Optional. The album artist - if this differs from the track artist
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.TrackNumber">
            <summary>
            Optional. The track number of the track on the album
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.MusicBrainzId">
            <summary>
            Optional. The MusicBrainz Track ID
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Track.Duration">
            <summary>
            The length of the track
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Lpfm.LastFmScrobbler.Track.WhenStartedPlaying" -->
        <member name="P:Lpfm.LastFmScrobbler.CorrectedTrack.TrackNameCorrected">
            <summary>
            True when the Track was corrected by the web service
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.CorrectedTrack.ArtistNameCorrected">
            <summary>
            True when the Artist was corrected by the web service
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.CorrectedTrack.AlbumNameCorrected">
            <summary>
            True when the Album was corrected by the web service
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.CorrectedTrack.AlbumArtistCorrected">
            <summary>
            True when the Album Artist was corrected by the web service
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.WebRequestRestApi">
            <summary>
            An implementation of <see cref="T:Lpfm.LastFmScrobbler.Api.IRestApi"/> based on <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.IRestApi">
            <summary>
            Defines a simple Rest API
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.IRestApi.SendGetRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a GET request to the REST service
            </summary>
            <param name="url">A fully qualified URL</param>
            <param name="queryItems">A Dictionary of request query items</param>
            <returns>A read-only XPath queryable <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.IRestApi.SendPostRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a POST request to the REST service
            </summary>
            <param name="url">A fully qualified URL</param>
            <param name="formItems">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of form items to post in the body of the request</param>
            <returns>A read-only XPath queryable <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Api.WebRequestRestApi.NameValuePairStringFormat">
            <summary>
            The Name Value Pair Format String used by this object
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Api.WebRequestRestApi.NameValuePairStringSeperator">
            <summary>
            The Name-value pair seperator used by this object
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.WebRequestRestApi.SendGetRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends a GET request to the REST service
            </summary>
            <param name="url">A fully qualified URL</param>
            <param name="queryItems">A Dictionary of request query items</param>
            <returns>A read-only XPath queryable <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.WebRequestRestApi.SendPostRequest(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Synchronously sends a POST request to the REST service and returns the XML Response
            </summary>
            <param name="url">A fully qualified URL</param>
            <param name="formItems">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of name-value pairs to post in the body of the request</param>
            <returns>A read-only XPath queryable <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
            <remarks>Will synchronously HTTP POST a application/x-www-form-urlencoded request</remarks>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.ITrackApi">
            <summary>
            Defines an API for the Scrobbling methods of the <see cref="!:http://www.last.fm/api/scrobbling">Last.fm Track web service</see>
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.UpdateNowPlaying(Lpfm.LastFmScrobbler.Track,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Notifies Last.fm that a user has started listening to a track. 
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
            <remarks>It is important to not use the corrections returned by the now playing service as input for the scrobble request, 
            unless they have been explicitly approved by the user</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.UpdateNowPlaying(Lpfm.LastFmScrobbler.Track,System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Notifies Last.fm that a user has started listening to a track. 
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
            <remarks>It is important to not use the corrections returned by the now playing service as input for the scrobble request, 
            unless they have been explicitly approved by the user</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.Scrobble(Lpfm.LastFmScrobbler.Track,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.Scrobble(Lpfm.LastFmScrobbler.Track,System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.Scrobble(System.Collections.Generic.IList{Lpfm.LastFmScrobbler.Track},Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="tracks">A list of <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ITrackApi.Scrobble(System.Collections.Generic.IList{Lpfm.LastFmScrobbler.Track},System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="tracks">A list of <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Scrobbler">
            <summary>
            Allows a client to "scrobble" tracks to the Last.fm webservice as they are played
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Scrobbler.RequestAuthorisationUriPattern">
            <summary>
            The format string pattern for the Last.fm Authorisation page
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Scrobbler.MinimumScrobbleTrackLengthInSeconds">
            <summary>
            The minimum allowed track length for scrobbling in Seconds
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.#ctor(System.String,System.String)">
            <summary>
            Instantiates a <see cref="T:Lpfm.LastFmScrobbler.Scrobbler"/>
            </summary>
            <param name="apiKey">An API Key from Last.fm. See http://www.last.fm/api/account </param>
            <param name="apiSecret">An API Secret from Last.fm. See http://www.last.fm/api/account </param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="apiKey">An API Key from Last.fm. See http://www.last.fm/api/account </param>
            <param name="apiSecret">An API Secret from Last.fm. See http://www.last.fm/api/account </param>
            <param name="sessionKey">An authorized Last.fm Session Key. See <see cref="M:Lpfm.LastFmScrobbler.Scrobbler.GetSession"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.GetAuthorisationUri">
            <summary>
            Returns a URI that the user should navigate to in their browser to authorise this Application (API Key) to access their account
            </summary>
            <remarks>See http://www.last.fm/api/desktopauth </remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.GetSession">
            <summary>
            Gets an authorised Session Key for the API Key and Secret provided. You must Authorise first, see <see cref="M:Lpfm.LastFmScrobbler.Scrobbler.GetAuthorisationUri"/>. 
            See http://www.last.fm/api/desktopauth for the full Authorisation process. Sets the Authentication Session for this instance at the same time
            </summary>
            <returns>The session key returned from Last.fm as string to be cached or stored by the client</returns>
            <remarks>Session Keys are forever. Once a client has obtained a session key it should be cached or stored by the client, and the next time this
            Scrobbler is instantiated, it should be passed in with the constructor arguments</remarks>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.NowPlaying(Lpfm.LastFmScrobbler.Track)">
            <summary>
            Submits a Track Update Now Playing request to the Last.fm web service
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.NowPlayingResponse"/></returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Scrobbler.Scrobble(Lpfm.LastFmScrobbler.Track)">
            <summary>
            Submits a Track Scrobble request to the Last.fm web service
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/></returns>
            <remarks>A track should only be scrobbled when the following conditions have been met: The track must be longer than 30 seconds. 
            And the track has been played for at least half its duration, or for 4 minutes (whichever occurs earlier). See http://www.last.fm/api/scrobbling </remarks>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.IAuthApi">
            <summary>
            Defines a Last.fm Auth API
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.IAuthApi.GetToken(Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Fetch an unathorized request token for an API account
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.IAuthApi.GetSession(Lpfm.LastFmScrobbler.Authentication,Lpfm.LastFmScrobbler.AuthenticationToken)">
            <summary>
            Fetch a session key for a user
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Authentication">
            <summary>
            A Last.fm Authentication DTO
            </summary>
            <remarks>See http://www.last.fm/api/desktopauth </remarks>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Authentication.ApiKey">
            <summary>
            An API Key
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Authentication.ApiSecret">
            <summary>
            An API Secret
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Authentication.Session">
            <summary>
            A <see cref="P:Lpfm.LastFmScrobbler.Authentication.Session"/>
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.ScrobbleResponses">
            <summary>
            A list of <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.ScrobbleResponses.AcceptedCount">
            <summary>
            The number of Scrobbles in this list that were accepted by the web service
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.ScrobbleResponses.IgnoredCount">
            <summary>
            The number of Scrobbles in this list that were ignored by the web service
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Response">
            <summary>
            An abstract Last.fm Scrobble response DTO
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Response.Track">
            <summary>
            A <see cref="P:Lpfm.LastFmScrobbler.Response.Track"/>
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Response.IgnoredMessage">
            <summary>
            The message provided by the web service if the scrobble was ignored
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Response.IgnoredMessageCode">
            <summary>
            The code provided by the web service if the scrobble was ignored
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Response.Exception">
            <summary>
            The exception thrown when scrobbling (if any)
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.NowPlayingResponse">
            <summary>
            A Now Playing Response DTO
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.ScrobbleResponse">
            <summary>
            A Scrobble Response DTO
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.LastFmApiException">
            <summary>
            A Last.fm API exception
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.LastFmApiException.#ctor(System.String)">
            <summary>
            Instantiates a Last.fm API exception
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.LastFmApiException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a Last.fm API exception
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Api.AuthApi">
            <summary>
            An API for some of the methods of the Last.fm Auth (Authentication) API
            </summary>
            <remarks>This class is named for the API that is wraps</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.AuthApi.GetToken(Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Fetch an unathorized request token for an API account
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.AuthApi.GetSession(Lpfm.LastFmScrobbler.Authentication,Lpfm.LastFmScrobbler.AuthenticationToken)">
            <summary>
            Fetch a session key for a user
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.#ctor">
            <summary>
            Instantiates a <see cref="T:Lpfm.LastFmScrobbler.Api.TrackApi"/>
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.#ctor(Lpfm.LastFmScrobbler.Api.IRestApi)">
            <summary>
            Instantiates a <see cref="T:Lpfm.LastFmScrobbler.Api.TrackApi"/>
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.UpdateNowPlaying(Lpfm.LastFmScrobbler.Track,System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Notifies Last.fm that a user has started listening to a track. 
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>        
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
            <remarks>It is important to not use the corrections returned by the now playing service as input for the scrobble request, 
            unless they have been explicitly approved by the user</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.UpdateNowPlaying(Lpfm.LastFmScrobbler.Track,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Notifies Last.fm that a user has started listening to a track. 
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>        
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
            <remarks>It is important to not use the corrections returned by the now playing service as input for the scrobble request, 
            unless they have been explicitly approved by the user</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.Scrobble(Lpfm.LastFmScrobbler.Track,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.Scrobble(Lpfm.LastFmScrobbler.Track,System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="track">A <see cref="T:Lpfm.LastFmScrobbler.Track"/> DTO containing track details</param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.Scrobble(System.Collections.Generic.IList{Lpfm.LastFmScrobbler.Track},Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="tracks">A list of <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.Scrobble(System.Collections.Generic.IList{Lpfm.LastFmScrobbler.Track},System.String,Lpfm.LastFmScrobbler.Authentication)">
            <summary>
            Add a track-play to a user's profile
            </summary>
            <param name="tracks">A list of <see cref="T:Lpfm.LastFmScrobbler.Track"/></param>
            <param name="context">Optional. Sub-client version (not public, only enabled for certain API keys). Null if not used</param>
            <param name="authentication"><see cref="T:Lpfm.LastFmScrobbler.Authentication"/> object</param>
            <returns>A <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>DTO containing details of Last.FM's response</returns>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.TrackApi.DateTimeToTimestamp(System.DateTime)">
            <summary>
            Returns the local time value of a DateTime object to a UTC UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC).           
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.Api.ApiHelper.LastFmWebServiceRootUrl">
            <summary>
            The Last.fm web service root URL
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.CheckLastFmStatus(System.Xml.XPath.XPathNavigator)">
            <summary>
            Check the Last.fm status of the response and throw a <see cref="T:Lpfm.LastFmScrobbler.Api.LastFmApiException"/> if an error is detected
            </summary>
            <param name="navigator">The response as <see cref="T:System.Xml.XPath.XPathNavigator"/></param>
            <exception cref="T:Lpfm.LastFmScrobbler.Api.LastFmApiException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.CheckLastFmStatus(System.Xml.XPath.XPathNavigator,System.Net.WebException)">
            <summary>
            Check the Last.fm status of the response and throw a <see cref="T:Lpfm.LastFmScrobbler.Api.LastFmApiException"/> if an error is detected
            </summary>
            <param name="navigator">The response as <see cref="T:System.Xml.XPath.XPathNavigator"/></param>
            <param name="webException">An optional <see cref="T:System.Net.WebException"/> to be set as the inner exception</param>
            <exception cref="T:Lpfm.LastFmScrobbler.Api.LastFmApiException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.SelectSingleNode(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Helper method to select a single node from an <see cref="T:System.Xml.XPath.XPathNavigator"/> as <see cref="T:System.Xml.XPath.XPathNavigator"/>
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.AddRequiredParams(System.Collections.Generic.Dictionary{System.String,System.String},System.String,Lpfm.LastFmScrobbler.Authentication,System.Boolean)">
            <summary>
            Adds the parameters that are required by the Last.Fm API to the <see cref="!:parameters"/> dictionary
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.GetApiSignature(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Generates a hashed Last.fm API Signature from the parameter name-value pairs, and the API secret
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.Api.ApiHelper.GetStringOfOrderedParamsForHashing(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets a string of ordered parameter values for hashing
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.Session">
            <summary>
            A Last.fm Session DTO
            </summary>
            <remarks>Only <see cref="P:Lpfm.LastFmScrobbler.Session.Key"/> is used by LPFM and is reliably persisted</remarks>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Session.Username">
            <summary>
            The Username. Can be Null
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Session.Key">
            <summary>
            The Session Key
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.Session.IsSubscriber">
            <summary>
            True if the user is currently a subscriber. Is not always set - can be false by default
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.AuthenticationToken">
            <summary>
            A Last.fm Authentication Token DTO
            </summary>
        </member>
        <member name="F:Lpfm.LastFmScrobbler.AuthenticationToken.ValidForMinutes">
            <summary>
            The number of seconds a token is valid for
            </summary>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.AuthenticationToken.#ctor(System.String)">
            <summary>
            Instantiates an <see cref="T:Lpfm.LastFmScrobbler.AuthenticationToken"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.AuthenticationToken.IsValid">
            <summary>
            True when this token is still valid
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.AuthenticationToken.Value">
            <summary>
            The token string value 
            </summary>
        </member>
        <member name="P:Lpfm.LastFmScrobbler.AuthenticationToken.Created">
            <summary>
            When the token was created
            </summary>
        </member>
        <member name="T:Lpfm.LastFmScrobbler.QueuingScrobbler">
            <summary>
            A Scrobbler object that scrobbles to a queue until the application is ready to process
            </summary>
            <remarks>Use this version of the Scrobbler as a helper for asynchronous scrobbling</remarks>
            
        </member>
        <member name="M:Lpfm.LastFmScrobbler.QueuingScrobbler.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates an instance of a <see cref="T:Lpfm.LastFmScrobbler.QueuingScrobbler"/>
            </summary>
            <param name="apiKey">Required. An API Key from Last.fm. See http://www.last.fm/api/account </param>
            <param name="apiSecret">Required. An API Secret from Last.fm. See http://www.last.fm/api/account </param>
            <param name="sessionKey">Required. An authorized Last.fm Session Key. See <see cref="M:Lpfm.LastFmScrobbler.Scrobbler.GetSession"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.QueuingScrobbler.NowPlaying(Lpfm.LastFmScrobbler.Track)">
            <summary>
            Enqueues a NowPlaying request but does not send it. Call <see cref="M:Lpfm.LastFmScrobbler.QueuingScrobbler.Process(System.Boolean)"/> to send
            </summary>
            <param name="track">The <see cref="T:Lpfm.LastFmScrobbler.Track"/> that is now playing</param>
            <remarks>This method is thread-safe. Will not check for invalid tracks until Processed. You should validate the Track before calling NowPlaying</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.QueuingScrobbler.Scrobble(Lpfm.LastFmScrobbler.Track)">
            <summary>
            Enqueues a Srobble request but does not send it. Call <see cref="M:Lpfm.LastFmScrobbler.QueuingScrobbler.Process(System.Boolean)"/> to send
            </summary>
            <param name="track">The <see cref="T:Lpfm.LastFmScrobbler.Track"/> that has played</param>
            <remarks>This method is thread-safe. Will not check for invalid tracks until Processed. You should validate the Track before calling Scrobble</remarks>
        </member>
        <member name="M:Lpfm.LastFmScrobbler.QueuingScrobbler.Process(System.Boolean)">
            <summary>
            Synchronously processes all scrobbles and now playing notifications that are in the Queues, and returns the results
            </summary>
            <param name="throwExceptionDuringProcess">When true, will throw the first Exception encountered during Scrobbling (and cease to process). 
            When false, any exceptions raised will be attached to the corresponding <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/>, but will not be thrown. Default is false.</param>
            <returns><see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponses"/>, a list of <see cref="T:Lpfm.LastFmScrobbler.ScrobbleResponse"/> </returns>
            <remarks>This method will complete synchronously and may take some time. This should be invoked by a single timer. This 
            method may not be thread safe</remarks>
        </member>
    </members>
</doc>
